{"version":3,"sources":["../../server/utilities/pdfToImage.js"],"names":["fs","require","path","joinImages","pdfToPng","convertPDFToImage","filePath","deleteAfterConvert","timestamp","Date","now","newDir","join","__dirname","imgDir","newImageName","existsSync","mkdirSync","recursive","disableFontFace","useSystemFonts","viewportScale","outputFilesFolder","readdir","err","files","console","error","filesToUse","map","f","direction","then","img","toFile","rmSync","force","unlinkSync","newImagePath","converter","pdf","errMsg","res","module","exports"],"mappings":";;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAMI,iBAAiB;AAAA,+BAAG,WAAOC,QAAP,EAA+C;AAAA,QAA9BC,kBAA8B,uEAAT,IAAS;;AACvE,QAAI;AACF,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AACA,UAAMC,MAAM,GAAGT,IAAI,CAACU,IAAL,CAAUC,SAAV,+BAA2CL,SAA3C,EAAf;AACA,UAAMM,MAAM,GAAGZ,IAAI,CAACU,IAAL,CAAUC,SAAV,uBAAf;AACA,UAAME,YAAY,gCAAyBP,SAAzB,SAAlB;;AAEA,UAAI,CAACR,EAAE,CAACgB,UAAH,CAAcL,MAAd,CAAL,EAA4B;AAC1BX,QAAAA,EAAE,CAACiB,SAAH,CAAaN,MAAb,EAAqB;AAAEO,UAAAA,SAAS,EAAE;AAAb,SAArB;AACD;;AAED,YAAMd,QAAQ,CAACA,QAAT,CAAkBE,QAAlB,EAA4B;AAChCa,QAAAA,eAAe,EAAE,IADe;AAEhCC,QAAAA,cAAc,EAAE,IAFgB;AAGhCC,QAAAA,aAAa,EAAE,GAHiB;AAIhCC,QAAAA,iBAAiB,EAAEX;AAJa,OAA5B,CAAN;AAOAX,MAAAA,EAAE,CAACuB,OAAH,CAAWZ,MAAX;AAAA,sCAAmB,WAAgBa,GAAhB,EAAqBC,KAArB,EAA4B;AAC7C;AACA,cAAID,GAAJ,EAAS;AACPE,YAAAA,OAAO,CAACC,KAAR,CAAc,+BAA+BH,GAA7C;AACA,mBAAO,KAAP;AACD;;AAED,cAAMI,UAAU,GAAGH,KAAK,CAACI,GAAN,CAAWC,CAAD,IAAO5B,IAAI,CAACU,IAAL,CAAUD,MAAV,EAAkBmB,CAAlB,CAAjB,CAAnB;AAEA,gBAAM3B,UAAU,CACbA,UADG,CACQyB,UADR,EACoB;AACtBG,YAAAA,SAAS,EAAE;AADW,WADpB,EAIHC,IAJG,CAIGC,GAAD,IAAS;AACb;AACAA,YAAAA,GAAG,CAACC,MAAJ,CAAWhC,IAAI,CAACU,IAAL,CAAUE,MAAV,EAAkBC,YAAlB,CAAX;AACD,WAPG,EAQHiB,IARG,CAQE,MAAM;AACV;AACAhC,YAAAA,EAAE,CAACmC,MAAH,CAAUxB,MAAV,EAAkB;AAAEO,cAAAA,SAAS,EAAE,IAAb;AAAmBkB,cAAAA,KAAK,EAAE;AAA1B,aAAlB,EAFU,CAGV;;AACA,gBAAI7B,kBAAJ,EAAwB;AACtBP,cAAAA,EAAE,CAACqC,UAAH,CAAc/B,QAAd;AACD;AACF,WAfG,CAAN;AAgBD,SAzBD;;AAAA;AAAA;AAAA;AAAA;AA2BA,UAAMgC,YAAY,0BAAmBvB,YAAnB,CAAlB;AACA,aAAOuB,YAAP;AACD,KA9CD,CA8CE,OAAOX,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd,EAAmDA,KAAnD;AACD;AACF,GAlDsB;;AAAA,kBAAjBtB,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;AAoDA,IAAMkC,SAAS;AAAA,gCAAG,WAAOC,GAAP,EAAYjC,kBAAZ,EAAmC;AACnD,QAAMkC,MAAM,GAAG,yDAAf;;AACA,QAAI;AACF,UAAMC,GAAG,SAASrC,iBAAiB,CAACmC,GAAD,EAAMjC,kBAAN,CAAnC;AAEA,aAAOmC,GAAP;AACD,KAJD,CAIE,OAAOf,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAcc,MAAd,EAAsB,IAAtB,EAA4Bd,KAA5B;AACA,aAAO,KAAP;AACD;AACF,GAVc;;AAAA,kBAATY,SAAS;AAAA;AAAA;AAAA,GAAf;;AAYAI,MAAM,CAACC,OAAP,GAAiBL,SAAjB","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst joinImages = require('join-images');\nconst pdfToPng = require('pdf-to-png-converter');\n\nconst convertPDFToImage = async (filePath, deleteAfterConvert = true) => {\n  try {\n    const timestamp = Date.now();\n    const newDir = path.join(__dirname, `../../uploads/svgs/${timestamp}`);\n    const imgDir = path.join(__dirname, `../../uploads/svgs`);\n    const newImageName = `conversion_pdf_png_${timestamp}.png`;\n\n    if (!fs.existsSync(newDir)) {\n      fs.mkdirSync(newDir, { recursive: true });\n    }\n\n    await pdfToPng.pdfToPng(filePath, {\n      disableFontFace: true,\n      useSystemFonts: true,\n      viewportScale: 3.0,\n      outputFilesFolder: newDir,\n    });\n\n    fs.readdir(newDir, async function (err, files) {\n      //handling error\n      if (err) {\n        console.error('Unable to scan directory: ' + err);\n        return false;\n      }\n\n      const filesToUse = files.map((f) => path.join(newDir, f));\n\n      await joinImages\n        .joinImages(filesToUse, {\n          direction: 'vertical',\n        })\n        .then((img) => {\n          // Save image as file\n          img.toFile(path.join(imgDir, newImageName));\n        })\n        .then(() => {\n          // Delete the folder that had the images\n          fs.rmSync(newDir, { recursive: true, force: true });\n          // Delete the old pdf too\n          if (deleteAfterConvert) {\n            fs.unlinkSync(filePath);\n          }\n        });\n    });\n\n    const newImagePath = `uploads/svgs/${newImageName}`;\n    return newImagePath;\n  } catch (error) {\n    console.error('Error while converting pdf to png', error);\n  }\n};\n\nconst converter = async (pdf, deleteAfterConvert) => {\n  const errMsg = 'An error occurred while trying to convert pdf to base64';\n  try {\n    const res = await convertPDFToImage(pdf, deleteAfterConvert);\n\n    return res;\n  } catch (error) {\n    console.error(errMsg, ': ', error);\n    return false;\n  }\n};\n\nmodule.exports = converter;\n"],"file":"pdfToImage.js"}